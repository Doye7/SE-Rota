
Randomiser{

private static void Randomiser()


GetTotalNumberOfShifts()
	If (NumberofShifts > 0)
		GetLowestAvailable()
			CompareHours()
			UpdateAvailability()
			Randomiser()
			//If cannot be assigned then 'ERROR: Cannot Assign Shift'
		
	else end if

}


private static GetTotalNumberOfShifts() {
	
	//This will get the total number of shifts from the database that are empty (somebody is not working in that shift)
	return NumberofShifts
}


private static AvailabilityNumbers() {

	//This will return the number of people that can do the shifts
	//Return an array of people that can actually work - within that it will have to populate the array
	TotalAvailabilityCalendar() -----------------------
		return AvailabilityNumbers
}


private static GetLowestAvailable() {

	//This will check the shifts that have the lowest number of people to work based on the availability
		AvailabilityNumbers()
	(Get the shifts that can be done by the lowest number of people)
		if (more than one shift has the same amount of people that can do them)
			pick one at random
			return shift
	
}

private static CheckHours(int EmployeeID) {
	//This will return the number of hours an employee is working WHEN a shift is selected
	//so that they can be compared in order to assign the shift to the employee who has the
	//least amount of hours currently assigned to them

	return hours

}

private static void CompareHours() {

	//This will compare how many hours an employee is working when more than one person is working a shift
	//The ID will be taken from the employees that can work the shifts
	CheckHours(int ID)
		if(Hours are the same)
		ChooseRandomEmployee()

}

private static ChooseRandomEmployee() {

	//This will pick a random employee based on who can do the shift
	//I'm not sure if this will integrate that well, if it doesn't - random employee can be chosen on CompareHours()
	ArrayList{Employees}	
	randomNumber (between 1, arraylist.length)
	return randomNumber
}

private static void UpdateAvailability() {

	//Checks last employee assigned a shift
	if (TotalAssignedHours >= MaxHours - 2) ------------------------------------------------------------ If the hours are equal to or less than 2 hours of maximum requested hours.
		//Put the new hours in their availbility (another function to be called)
		remove from temp availability list

	else 
		////Put the new hours in their availbility (another function to be called)

	
		

	//When a shift is given, the availabiltiy will change to a temporary copy of the availability timetable
	//This will then be populated as a shift is assigned
	
	//Will look into this bit later...

}

//Availability needs to update as someone is assigned a shift due to collisions happening
//If Nobody can do a shift - there needs to be an error message
//We need to remove employee if they have reached their max hours; for simplicity they should be removed from the availability list if they have reached their (MaxRequestedHours - 2)

}